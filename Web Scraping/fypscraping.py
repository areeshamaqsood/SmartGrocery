# -*- coding: utf-8 -*-
"""FYPScraping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pd74souqmFvqhngV8Nh1tbIbaYv0y593
"""

from google.colab import auth
auth.authenticate_user()

import gspread
from google.auth import default
# from oauth2client.client import GoogleCredentials
creds, _ = default()
gc = gspread.authorize(creds)
# gc = gspread.authorize(GoogleCredentials.get_application_default())

import pandas as pd
wb = gc.open_by_url('https://docs.google.com/spreadsheets/d/15bsqYazKmstMi987xM3wPC2wZNQbcZS8DmXPv2x_wec/edit#gid=0')
sheet = wb.worksheet('Sheet1')
data = sheet.get_all_values()
products = pd.DataFrame(data)
products.columns = products.iloc[0]
products = products.iloc[1:]

products

import requests
import numpy
from bs4 import BeautifulSoup
from urllib.request import Request, urlopen
# from selenium import webdriver
# Sites which contain ingredient information
places=["carrefour.pk","grocerapp.pk","24mycart.pk","openfoodfacts.org","carrefouruae.com"]
# Items that are exclusive only one ingredient only
oneing = ["Sugar","Salt","Haldi","Cardamom","Detergent","Soap","Tamarind","Flour","Baisan"]
for ind in products.index:
  url = products['Link'][ind]
  ingred = ""
  # See if ingedients not mentioned in the ne ingredient list
  if (products['Category'][ind] not in oneing):
    if(url!= "" and products['Ingredient'][ind]==""):
      # Match if its openfoodfacts.pk application
      if("openfoodfacts.org" in url):
        print(url)
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        stri = "Ingredients: "
        tags = soup.find(id="ingredients_list")
        print(tags)
        # Validator if ingredient not found
        found_ing = 0
        # Find ingredients
        for ing in tags:
          # Convert tag to string
          tag = str(ing)
          # Find if keywords "Ingredients: " is in tag
          if stri in tag:
            # Find index of "Ingredients: " in tag
            ingtag = tag.find(stri)
            # Find index of " " after finding Ingredients keyword(to start)
            prodtag = tag.find(" ",ingtag)
            # Get substring in order to get the ingredients
            ing_1 = tag[prodtag+1:]
            print(ing_1)
            ingred = ing_1
            found_ing = 1
            break
          else:
            # Get text irrespective of the span tags
            ing_1 = tags.get_text()
            print(ing_1)
            ingred = ing_1
            found_ing = 1
            break
        # if ingredient not found take the ingredients from one of the products in the category 
        if(found_ing == 0):
        # If this is the first product in the category for now we simply state the Category as Ingredient
          if(products['Category'][ind] != products['Category'][ind-1]):
            print("First Category Item: ",products['Category'][ind])
            ingred = products['Category'][ind]
          else:
            print("Previous Category Item: ",products['Category'][ind-1])
            ingred = products['Ingredient'][ind-1]
        print(ingred)
        products.loc[ind, 'Ingredient'] = ingred    
      # Match if its grocerapp.pk application
      if("grocerapp.pk" in url):
        print(url)
        # Convert url to google search because "request" doesnt retrieve entire html(in grocer.pk)
        prod_1 = products['Product'][ind]
        goog = prod_1.replace(" ","+")
        goog = goog + "+Ingredients:"
        googs = "https://www.google.com/search?q=" + goog
        response = requests.get(googs)
        soup = BeautifulSoup(response.text, 'html.parser')
        stri = "Ingredients: "
        tags = soup.find(id="main")
        # Validator if ingredient not found
        found_ing = 0
        # Find ingredients
        for ing in tags:
          # Convert tag to string
          tag = str(ing)
          # Find if keywords "Ingredients: " is in tag
          if stri in tag:
            # Find index of "Ingredients: " in tag
            ingtag = tag.find(stri)
            # Find index of " " after finding Ingredients keyword(to start)
            prodtag = tag.find(" ",ingtag)
            # Find index of "." after finding Ingredients keyword(to end)
            dottag = tag.find(".",ingtag)
            # Get substring in order to get the ingredients
            ing_1 = tag[prodtag+1:dottag]
            # Validate if Ingredient is inside another tag
            if "span" not in ing_1:
              print("First=", ing_1)
              found_ing = 1
              ingred = ing_1
            sp = ing.find_all("span")
            for ele in sp:
              sp_1 = ele.text.strip()
              st_2 = str(sp_1)
              v1 = st_2[0:5] 
              print(v1,"=========",ing)
              # Print the correct ingredients
              if v1 in ing_1:
                print("Second=",st_2)
                found_ing = 1
                ingred = st_2
            break
        # if ingredient not found take the ingredients from one of the products in the category 
        if(found_ing == 0):
          # If this is the first product in the category for now we simply state the Category as Ingredient
          if(products['Category'][ind] != products['Category'][ind-1]):
            # print(products['Category'][ind])
            ingred = products['Category'][ind]
          else:
            # print(products['Category'][ind-1])
            ingred = products['Ingredient'][ind-1]
            # findIng(products['Category'][ind],ind)
        print(ingred)
        products.loc[ind, 'Ingredient'] = ingred
      if("24mycart.pk" in url):
        print(url)
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        stri = "Ingredients:"
        # Find parent class that contains the child class
        tags= soup.select("p > .st")
        tag = str(tags[1].parent.get_text())
        # print(tag)
        # Find index of "Ingredients: " in tag
        ingtag = tag.rindex(":")
        print(ingtag)
        # Get substring in order to get the ingredients
        ing_1 = tag[ingtag+1:]
        print(ing_1)
        ingred = ing_1
        found_ing = 1
        # break
        # if ingredient not found take the ingredients from one of the products in the category 
        if(found_ing == 0):
          # If this is the first product in the category for now we simply state the Category as Ingredient
          if(products['Category'][ind] != products['Category'][ind-1]):
            # print(products['Category'][ind])
            ingred = products['Category'][ind]
          else:
            # print(products['Category'][ind-1])
            ingred = products['Ingredient'][ind-1]
            # findIng(products['Category'][ind],ind)
        print(ingred)
        products.loc[ind, 'Ingredient'] = ingred

      if("carrefour.pk" in url):
        print(url)
        response = requests.get(url, headers={"User-Agent": "Mozilla/5.0 (X11; CrOS x86_64 12871.102.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.141 Safari/537.36"})
        soup = BeautifulSoup(response.text, 'html.parser')
        tags= soup.select("div > .css-1hrc83f")
        if(len(tags) > 0):
          ing_1 = tags[0].get_text()
          # print(soup.findAll("div", {"class": "css-1hrc83f"}))
          stri = "Ingredients"
          ingtag = ing_1.index(stri)
          ingred = ing_1[ingtag+11:]
          found_ing = 1
          print(ingred)
          products.loc[ind, 'Ingredient'] = ingred
        # if ingredient not found take the ingredients from one of the products in the category 
        if(found_ing == 0):
          # If this is the first product in the category for now we simply state the Category as Ingredient
          if(products['Category'][ind] != products['Category'][ind-1]):
            # print(products['Category'][ind])
            ingred = products['Category'][ind]
          else:
            # print(products['Category'][ind-1])
            ingred = products['Ingredient'][ind-1]
            # findIng(products['Category'][ind],ind)
        print(ingred)
        products.loc[ind, 'Ingredient'] = ingred

      if("carrefouruae.com" in url):
        print(url)
        response = requests.get(url, headers={"User-Agent": "Mozilla/5.0 (X11; CrOS x86_64 12871.102.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.141 Safari/537.36"})
        soup = BeautifulSoup(response.text, 'html.parser')
        tags= soup.select("div > .css-joa6mv")
        if(len(tags) > 0):
          ing_1 = tags[0].get_text()
          # print(soup.findAll("div", {"class": "css-1hrc83f"}))
          stri = "Ingredients"
          ingtag = ing_1.index(stri)
          ingred = ing_1[ingtag+11:]
          found_ing = 1
          print(ingred)
          products.loc[ind, 'Ingredient'] = ingred
        # if ingredient not found take the ingredients from one of the products in the category 
        if(found_ing == 0):
          # If this is the first product in the category for now we simply state the Category as Ingredient
          if(products['Category'][ind] != products['Category'][ind-1]):
            # print(products['Category'][ind])
            ingred = products['Category'][ind]
          else:
            # print(products['Category'][ind-1])
            ingred = products['Ingredient'][ind-1]
            # findIng(products['Category'][ind],ind)
        print(ingred)
        products.loc[ind, 'Ingredient'] = ingred
      if("adams.pk" in url):
        print(url)
        response = requests.get(url, headers={"User-Agent": "Mozilla/5.0 (X11; CrOS x86_64 12871.102.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.141 Safari/537.36"})
        soup = BeautifulSoup(response.text, 'html.parser')
        # tags = soup.select(".col-md-6 col-sm-8 cheaddar-text > p")
        tags= soup.find("div", {"class":"col-md-6 col-sm-8 cheaddar-text"})
        children = tags.findChildren("p" , recursive=False)
        # print(children[2].get_text())
        ing_1 = children[2].get_text()
        ingred = ing_1[ing_1.index("from ")+5:]
        print(ing_1[ing_1.index("from ")+5:])
        found_ing = 1
        products.loc[ind, 'Ingredient'] = ingred
        # if ingredient not found take the ingredients from one of the products in the category 
        if(found_ing == 0):
          # If this is the first product in the category for now we simply state the Category as Ingredient
          if(products['Category'][ind] != products['Category'][ind-1]):
            # print(products['Category'][ind])
            ingred = products['Category'][ind]
          else:
            # print(products['Category'][ind-1])
            ingred = products['Ingredient'][ind-1]
            # findIng(products['Category'][ind],ind)
        print(ingred)
        products.loc[ind, 'Ingredient'] = ingred
      if("orbis.pk" in url):
        print(url)
        response = requests.get(url, headers={"User-Agent": "Mozilla/5.0 (X11; CrOS x86_64 12871.102.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.141 Safari/537.36"})
        soup = BeautifulSoup(response.text, 'html.parser')
        tags= soup.find("div", {"class":"panel entry-content active"})
        children = tags.findChildren("p" , recursive=False)
        # print(children[2].get_text())
        ing_1 = children[1].get_text()
        # print(ing_1)
        ingred = ing_1[ing_1.index("Ingredients: ")+13:]
        print(ingred)
        # print(ing_1[ing_1.index("from ")+5:])
        found_ing = 1
        products.loc[ind, 'Ingredient'] = ingred
        # # if ingredient not found take the ingredients from one of the products in the category 
        if(found_ing == 0):
          # If this is the first product in the category for now we simply state the Category as Ingredient
          if(products['Category'][ind] != products['Category'][ind-1]):
            # print(products['Category'][ind])
            ingred = products['Category'][ind]
          else:
            # print(products['Category'][ind-1])
            ingred = products['Ingredient'][ind-1]
            # findIng(products['Category'][ind],ind)
        print(ingred)
        products.loc[ind, 'Ingredient'] = ingred

  else:
    ingred = products['Category'][ind]
    products.loc[ind, 'Ingredient'] = ingred
  # Update to cell in the Sheets file 
  # Get Specific cell 
  c = 'D' + str(ind+1)
  if(products['Ingredient'][ind]!=""):
    # Update to that cell
    sheet.update(c,products['Ingredient'][ind])

products

